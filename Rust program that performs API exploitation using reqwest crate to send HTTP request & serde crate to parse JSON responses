//rust.

use reqwest;
use serde::{Deserialize, Serialize};
use base64;

#[derive(Debug, Serialize, Deserialize)]
struct User {
    id: i32,
    name: String,
    email: String,
}

#[derive(Debug, Serialize, Deserialize)]
struct ErrorResponse {
    error: String,
}

#[tokio::main]
async fn main() -> Result<(), reqwest::Error> {
    // Define the API endpoint URL
    let url = "https://example.com/api/v1/users";

    // Define the API credentials
    let username = "your_username";
    let password = "your_password";

    // Create a client with the API credentials
    let client = reqwest::Client::new();
    let auth = format!("{}:{}", username, password);
    let encoded_auth = base64::encode(auth); // Base64 encode the credentials

    // Send a GET request to the API endpoint
    let response = client
        .get(url)
        .header("Authorization", format!("Basic {}", encoded_auth))
        .send()
        .await?;

    // Check if the response was successful
    if response.status().is_success() {
        // Parse the JSON response
        let users: Vec<User> = response.json().await?;
        println!("Users: {:?}", users);
    } else {
        // Parse the error response
        let error: ErrorResponse = response.json().await?;
        println!("Error: {}", error.error);
    }

    Ok(())
}
//Addedvthe base64 crate to encode authorization header.
//Ensure to include the base64 dependency in cargo.toml.
//toml,
[dependencies]
reqwest = "0.11.6"
serde = { version = "1.0.130", features = ["derive"] }
tokio = { version = "1.20.1", features = ["full"] }
base64 = "0.21.0"  # Add this line.

